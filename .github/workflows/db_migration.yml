# .github/workflows/db_migration.yml
name: üóÑÔ∏è DB Migration Pipeline

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      solution:
        description: 'Which service? (e.g. loyalty, intermediate, marketplace)'
        required: true
        type: choice
        options:
          - loyalty
          - intermediate
          - marketplace
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - preprod
          - prod
      tenant:
        description: 'Tenant code'
        required: true
        type: choice
        options:
          - in
          - ke
          - tz
          - gh
          - id
          - ph
          - th
          - ug
          - vn

jobs:
  pre-migration:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      SOLUTION:    ${{ github.event.inputs.solution }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      TENANT:      ${{ github.event.inputs.tenant }}

      SRC_ENDPOINT: ${{ secrets[ format('{0}_{1}_{2}_SRC_ENDPOINT', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      SRC_PORT:     5432
      SRC_DB:       ${{ github.event.inputs.solution }}
      SRC_USER:     ${{ secrets[ format('{0}_{1}_{2}_SRC_USER',    github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      SRC_PASS:     ${{ secrets[ format('{0}_{1}_{2}_SRC_PASS',    github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}

      TGT_ENDPOINT: ${{ secrets[ format('{0}_{1}_{2}_TGT_ENDPOINT', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      TGT_PORT:     5432
      TGT_DB:       ${{ github.event.inputs.solution }}
      TGT_USER:     ${{ secrets[ format('{0}_{1}_{2}_TGT_USER',    github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      TGT_PASS:     ${{ secrets[ format('{0}_{1}_{2}_TGT_PASS',    github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}

      DMS_TASK_ARN: ${{ secrets[ format('{0}_{1}_{2}_DMS_TASK_ARN', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

    steps:
      - uses: actions/checkout@v3

      - name: Install psql
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      # - name: Configure AWS creds
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: us-east-1
      #     role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: ‚úÖ Readiness check & DB setup
        run: |
          chmod +x ./scripts/readiness-check.sh
          ./scripts/readiness-check.sh \
            --endpoint $SRC_ENDPOINT \
            --port     $SRC_PORT \
            --user     $SRC_USER \
            --pass     $SRC_PASS \
            --tenant   $TENANT \
            --env      $ENVIRONMENT

      - name: üèÉ‚Äç‚ôÇÔ∏è Run Pre‚ÄëMigration SQL
        run: |
          chmod +x ./scripts/pre-migration.sh
          ./scripts/pre-migration.sh \
            --endpoint $TGT_ENDPOINT \
            --port     $TGT_PORT \
            --user     $TGT_USER \
            --pass     $TGT_PASS \
            --database $TGT_DB \
            --tenant   $TENANT \
            --env      $ENVIRONMENT

      - name: üèÉ‚Äç‚ôÇÔ∏è Run Pre‚ÄëMigration Validation
        run: |
          chmod +x ./scripts/pre-migration-validation.sh
          ./scripts/pre-migration-validation.sh \
            --endpoint $TGT_ENDPOINT \
            --port     $TGT_PORT \
            --user     $TGT_USER \
            --pass     $TGT_PASS \
            --database $TGT_DB \
            --tenant   $TENANT \
            --env      $ENVIRONMENT

  start-dms:
    needs: pre-migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      SOLUTION:    ${{ github.event.inputs.solution }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      TENANT:      ${{ github.event.inputs.tenant }}

      DMS_TASK_ARN: ${{ secrets[ format('{0}_{1}_{2}_DMS_TASK_ARN', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

    steps:
      - uses: actions/checkout@v3
      # - name: Configure AWS creds
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: us-east-1
      #     role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: ‚ñ∂Ô∏è Start DMS (with CDC)
        run: |
          chmod +x ./scripts/start-dms.sh
          ./scripts/start-dms.sh \
            --dms-task-arn $DMS_TASK_ARN \
            --tenant        $TENANT \
            --env           $ENVIRONMENT

      - name: ‚è≥ Wait for CDC to catch up
        run: |
          chmod +x ./scripts/wait-cdc.sh
          ./scripts/wait-cdc.sh \
            --dms-task-arn $DMS_TASK_ARN \
            --tenant        $TENANT \
            --env           $ENVIRONMENT

  post-dms:
    needs: start-dms
    runs-on: ubuntu-latest
    env:
      SOLUTION:        ${{ github.event.inputs.solution }}
      ENVIRONMENT:     ${{ github.event.inputs.environment }}
      TENANT:          ${{ github.event.inputs.tenant }}

      SRC_ENDPOINT:    ${{ secrets[ format('{0}_{1}_{2}_SRC_ENDPOINT', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      SRC_PORT:        5432
      SRC_DB:          ${{ github.event.inputs.solution }}
      SRC_USER:        ${{ secrets[ format('{0}_{1}_{2}_SRC_USER', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      SRC_PASS:        ${{ secrets[ format('{0}_{1}_{2}_SRC_PASS', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}

      TGT_ENDPOINT:    ${{ secrets[ format('{0}_{1}_{2}_TGT_ENDPOINT', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      TGT_PORT:        5432
      TGT_DB:          ${{ github.event.inputs.solution }}
      TGT_USER:        ${{ secrets[ format('{0}_{1}_{2}_TGT_USER', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      TGT_PASS:        ${{ secrets[ format('{0}_{1}_{2}_TGT_PASS', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}

      DMS_TASK_ARN:    ${{ secrets[ format('{0}_{1}_{2}_DMS_TASK_ARN', github.event.inputs.solution, github.event.inputs.environment, github.event.inputs.tenant) ] }}
      AWS_ROLE_ARN:    ${{ secrets.AWS_ROLE_ARN }}
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v3

      # - name: Configure AWS creds
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: us-east-1
      #     role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: üîç Data Validation
        run: |
          chmod +x ./scripts/validate-data.sh
          ./scripts/validate-data.sh \
            --tenant $TENANT \
            --env    $ENVIRONMENT

      - name: üîÄ Switch Reads
        run: |
          chmod +x ./scripts/switch-read-endpoint.sh
          ./scripts/switch-read-endpoint.sh \
            --tenant $TENANT \
            --env    $ENVIRONMENT

      - name: ‚è∏Ô∏è Pause Writes
        run: |
          chmod +x ./scripts/pause-writes.sh
          ./scripts/pause-writes.sh \
            --tenant $TENANT \
            --env    $ENVIRONMENT

      - name: üõë Stop CDC
        run: |
          chmod +x ./scripts/stop-cdc.sh
          ./scripts/stop-cdc.sh \
            --dms-task-arn $DMS_TASK_ARN \
            --tenant        $TENANT \
            --env           $ENVIRONMENT

      - name: üèÉ‚Äç‚ôÄÔ∏è Run Post‚ÄëMigration SQL
        run: |
          chmod +x ./scripts/post-migration.sh
          ./scripts/post-migration.sh \
            --endpoint $TGT_ENDPOINT \
            --port     $TGT_PORT \
            --user     $TGT_USER \
            --pass     $TGT_PASS \
            --database $TGT_DB \
            --tenant   $TENANT \
            --env      $ENVIRONMENT

      - name: ‚úÖ Final Validation
        run: |
          chmod +x ./scripts/post-migration-validation.sh
          ./scripts/post-migration-validation.sh \
            --tenant $TENANT \
            --env    $ENVIRONMENT \
            --post

      - name: üñãÔ∏è Switch Writes
        run: |
          chmod +x ./scripts/switch-write-endpoint.sh
          ./scripts/switch-write-endpoint.sh \
            --tenant $TENANT \
            --env    $ENVIRONMENT

      # - name: üßπ Cleanup DMS
      #   run: |
      #     chmod +x ./scripts/cleanup-dms.sh
      #     ./scripts/cleanup-dms.sh \
      #       --dms-task-arn $DMS_TASK_ARN \
      #       --tenant        $TENANT \
      #       --env           $ENVIRONMENT

      - name: üì£ Notify Success to MS¬†Teams
        run: |
          chmod +x ./scripts/notify.sh
          ./scripts/notify.sh \
            --solution $SOLUTION \
            --tenant   $TENANT \
            --env      $ENVIRONMENT \
            --webhook  "$TEAMS_WEBHOOK_URL"
